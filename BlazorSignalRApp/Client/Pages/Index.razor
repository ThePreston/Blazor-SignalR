@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable
    <div class="row">
        <div class="form-group">
            <label style="display:none">Count:
                <input @bind="messageCountInput" />
            </label>
        </div>
        <div class="form-group">
            <label>TransId:
                <input @bind="messageId" disabled="disabled" size="40"/>
            </label>
        </div>
        <div class="form-group" >
            <label >
                Message:<input @bind="messageInput" size="50"  />
            </label>
        </div>
        <button @onclick="Start" disabled="@(!IsConnected)">Send</button>

        <hr>
    </div>
    <div class="row">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>
    </div>

@code
{
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private int messageCountInput = 300;
    private string messageId = Guid.NewGuid().ToString();
    private string messageInput;
    private DateTime _StartTS;
    private DateTime _ReceiveTS;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string[]>("ReceiveMessage", (message) =>
        {
            
            foreach(var msg in message)
                if (!messages.Contains(msg))
                    messages.Add(msg);

            StateHasChanged();

            if(messages.FindAll(s => s.IndexOf("EndProcess", StringComparison.OrdinalIgnoreCase) >= 0).Count == 0)
                Send().RunSynchronously();
            else
            {
                messages.Add("Process Completed");
                StateHasChanged();
            }

        });

        await hubConnection.StartAsync();
    }

    public async Task Send()
    {
        await hubConnection.SendAsync("SendMessage", messageId);
    }
    
    public async Task StartProcess()
    {
        await hubConnection.SendAsync("StartProcess", messageId, messageInput);
    }

    public async Task Start()
    {
        messages.Clear();
        _StartTS = DateTime.UtcNow;
        await StartProcess();
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}